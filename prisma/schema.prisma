
generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int     @id @default(autoincrement())
  user_id String @unique
  name String 
  email String  @unique 
  phone_number String 
  password String
  role Role[]
  ac_type String @default("USER")
  createdAt DateTime @default(now())
  branches Branch[]
}

model Role {
  id        Int      @id @default(autoincrement())
  user_id   String
  role      String
  link      User     @relation(fields: [user_id], references: [user_id])
  createdAt DateTime @default(now())
}

model Coaching_center{
  id Int @id @default(autoincrement())
  coaching_center_id String @unique
  name String
  address String
  city String
  state String
  postal_code String
  center_phone_number String
  center_email String
  website String?
  established String
  subdomain String
  createdAt DateTime @default(now())
  details_coaching_center Details_coaching_center[]

}
model Details_coaching_center {
  id Int @id @default(autoincrement())
  coaching_center_id String @unique
  primary_contact_person_name String
  primary_contact_person_position String
  primary_contact_person_phone String
  primary_contact_person_email String  
  createdAt DateTime @default(now())
  details Coaching_center @relation(fields: [coaching_center_id],references: [coaching_center_id])
  subjects Coaching_center_subject[]
  levels Education_level[]
  
}
model Coaching_center_subject{
  id Int @id @default(autoincrement())
  subject_id String @unique
  coaching_center_id String 
  createdAt DateTime @default(now())
  center_subject Details_coaching_center @relation(fields: [coaching_center_id],references: [coaching_center_id])
  subject_name String
}

model Education_level{
  id Int @id @default(autoincrement())
  level_id String
  level_name String
  coaching_center_id String 
  createdAt DateTime @default(now())
  center_level Details_coaching_center @relation(fields: [coaching_center_id],references: [coaching_center_id])
}

model Branch{
  id Int @id @default(autoincrement())
  branch_id String @unique
  branch_name String
  coaching_center_id String
  address String
  city String
  state String
  postal_code String
  branch_phone_number String
  branch_email String
  createdAt DateTime @default(now())
  linker User @relation(fields: [coaching_center_id], references: [user_id])
  students Batch_student[]
  revenue Revenue[]
}

model Batch{
  id Int @id @default(autoincrement())
  batch_id String @unique
  batch_name String 
  start_date String
  coaching_center_id String
  branch_id String
  end_date String
  batch_type String
  batch_fee String
  available_seats String
  createdAt DateTime @default(now())
  schedules Batch_schedule[]
  students Batch_student[]
  revenue Revenue[]
}
model Batch_schedule{
  id Int @id @default(autoincrement())
  schedule_id String
  batch_id String 
  name_bn String
  name_en String
  createdAt DateTime @default(now())
  schedule Batch @relation(fields: [batch_id],references: [batch_id])
}
model Batch_student{
  id Int @id @default(autoincrement())
  student_id String
  name String
  coaching_center_id String
  branch_id String 
  batch_id String
  phone_number String
  email String
  createdAt DateTime @default(now())
  batch_link Batch @relation(fields: [batch_id], references: [batch_id])
  branch_link Branch @relation(fields: [branch_id],references: [branch_id])
}
model Revenue{
  id Int @id @default(autoincrement())
  revenue_id String @unique
  student_id String
  student_name String
  coaching_center_id String
  branch_id String 
  batch_id String
  phone_number String
  amount String
  payment_method String
  createdAt DateTime @default(now())
  link Branch @relation(fields: [branch_id], references: [branch_id])
  linker Batch @relation(fields: [batch_id],references: [batch_id])
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
